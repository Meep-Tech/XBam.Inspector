@using Meep.Tech.Collections.Generic
@using Xbam.Inspector.Data

<div class="card-container @(!IsExpanded ? "closed" : "")">
    <div 
        class="card @(!IsExpanded ? "closed" : "")" 
        style="background-color: @(CurrentMainColor);">
        <nav 
            class="navbar navbar-expand-lg navbar-dark justify-content-between" 
            style="height:35px;background-color:@(CurrentMainColor);">
            <span class="navbar-brand mb-0 h1" style="margin-left:10px">@Title</span>
            <button
                title="Toggle Expanded"
                @onclick=@(() => ToggleExpanded())
                style="background-color:@(CurrentMainColor);color:white;width:30px;height:30px;">
                @ExpandToggleSymbol</button>
        </nav>
        @if(IsExpanded) {
            <div
                class="card-content" 
                style="height:calc(@(GetHeightValue(Height))px - 35px - 10px);overflow:auto;color:white;background-color:#222222;padding:5px">
                @ChildContent
            </div>
        }
    </div>
</div>

@code {
    public enum Heights {
        Short,
        Middle,
        Tall
    }

    [Parameter]
    public virtual CardData State { 
        get; 
        set;
    }

    [Parameter]
    public RenderFragment ChildContent {
        get;
        set; 
    }

    [Parameter]
    public Heights Height {
        get => _height 
            ??= (State?.Height ?? Heights.Middle);
        set {
            _height = value;
            if (State is not null) {
                State.Height = value;
            }
        }
    } Heights? _height;

    [Parameter, EditorRequired]
    public string Title {
        get;
        set; 
    }
    
    [Parameter]
    public string Key {
        get => _key ??= Title;
        set => _key = value; 
    } string _key;

    [Parameter]
    public bool IsExpanded {
        get => IsExpandedOverride 
            ?? State?.IsExpanded
            ?? true;
        init {
            IsExpandedOverride = value;
        }
    } protected bool? IsExpandedOverride;

    protected string ExpandToggleSymbol
        => IsExpanded 
            ? "-"
            : "+";

    protected string CurrentMainColor
        => IsExpanded 
            ? State?.Archetype.ExpandedColor ?? "gray"
            : State?.Archetype.CollapsedColor ?? "black";

    protected void ToggleExpanded(bool? @override = null){
        if (State is not null) {
            State.IsExpanded = (@override ?? !IsExpanded);
        } else {
            IsExpandedOverride = @override ?? !IsExpanded;
        }

        IsExpandedOverride = null;
        StateHasChanged();
    }

    public static string GetHeightValue(Heights height)
        => height switch {
            Heights.Tall => "900",
            Heights.Middle => "600",
            Heights.Short => "300",
            _ => throw new Exception()
        };
}
