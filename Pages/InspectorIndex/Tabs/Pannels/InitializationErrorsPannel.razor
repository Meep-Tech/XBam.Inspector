@using Meep.Tech.Data.Configuration
@using Xbam.Inspector.Shared.Components.Cards
@using Xbam.Inspector.Shared.Components.Tabs
@using Xbam.Inspector.Shared.Components
@using Xbam.Inspector.Data;
@using Meep.Tech.Data;
@using Meep.Tech.Data.Reflection;
@inherits TabPannel

@if (IsTheActivePage) {
		<div id="errors" style="height:1000px">
			<MasonryGrid>
				@foreach(Loader.Failure failure in Archetypes.DefaultUniverse.Loader.Failures) {
					<MasonryCard>
						<Card Title=@(failure.XbamType + ": " + failure.SystemType.ToFullHumanReadableNameString(false))>
							<h3><b>System Type:</b> @failure.XbamType</h3>
							<h4><b>XBam Type:</b> @failure.SystemType.ToFullHumanReadableNameString()</h4>
							@{var errorText = _getErrorText(failure);}
							<p title=@errorText @ondblclick=@(() => _onClickErrorMessage(failure.SystemType))>
								@errorText;
							</p>
						</Card>
					</MasonryCard>
				}
			</MasonryGrid>
		</div>
}

@code {
	HashSet<System.Type> _toggledErrors
			= new();

	public override string Title {
		get => $"XBam Loader Returned Errors ({Archetypes.DefaultUniverse.Loader.Failures.Count()})!!!";
		set => base.Title = value;
	}

	public override string HilightColor{
		get => "red";
		set => base.HilightColor = value;
	}

	void _onClickErrorMessage(System.Type forType) {
		if (_toggledErrors.Contains(forType)) {
			_toggledErrors.Remove(forType);
		} else {
			_toggledErrors.Add(forType);
		}
	}

	string _getErrorText(Loader.Failure failure)
		=> _toggledErrors.Contains(failure.SystemType) ? failure.Exception.ToString() : failure.ToString();

}
