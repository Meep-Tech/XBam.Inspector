@using Xbam.Inspector.Data
@using Xbam.Inspector.Pages.InspectorIndex.Tabs.Pannels
@using Xbam.Inspector.Shared.Components
@using Xbam.Inspector.Shared.Components.Tabs
@inherits TabsArea
@implements IHandleAfterRender

<CascadingValue Value="this">
    <table style="width:100vw;background-color:#333333;" class="justify-content-start">
        <tr>
            <td style="max-width:250px;background-color:dimgrey;" class="item-tab btn-group-vertical d-flex justify-content-start" role="toolbar">
              @foreach (TabPannel tabPage in Pages) {
                <button
                    style="width:100%"
                    type="button"
                    title=@tabPage.Key
                    class="@GetButtonClass(tabPage)"
                    @onclick=@(() => {
                        var state = Xbam.Inspector.Pages.Index.TabState[TabId];
                        ActivatePage(tabPage);
                        var tabState = state.ItemsState[(tabPage as ItemPannel).Key];
                        UpdatePannelText(tabState.Key);
                        state.CurrentItemId = tabPage.Title;
                    })>
                    @(tabPage.Title ?? tabPage.Key)
                </button>
              }
            </td>
            <td style="color:white;">
                @ChildContent
                @foreach(ItemData itemData in Xbam.Inspector.Pages.Index.TabState[TabId].ItemsState.Values) {
                    <div class="item-pannel" style="height:1200px">
                        <ItemPannel 
                            Title=@itemData.Name
                            TabId=@TabId
                            TabType=@TabType
                            Key=@itemData.Key/>
                    </div>
                }
            </td>
        </tr>
    </table>
</CascadingValue>
@code {
    [Parameter, EditorRequired]
    public string TabId {
        get;
        set;
    }

    [Parameter, EditorRequired]
    public InspectorTabData.Type TabType {
        get;
        set;
    }

    [Parameter, EditorRequired]
    public Action<string> UpdatePannelText {
        get;
        set;
    }

    protected override void OnInitialized() {
        base.OnInitialized();
        var state = Xbam.Inspector.Pages.Index.TabState[TabId];
        if (state.ItemsState is null) {
            state.ItemsState 
                = TabType.LoadItems(Xbam.Inspector.Pages.Index.TabState[TabId]);
            if (state.ItemsState.Any()) {
                UpdatePannelText(state.ItemsState.First().Value.Key);
            }

            StateHasChanged();
        }
    }

    async Task IHandleAfterRender.OnAfterRenderAsync() {
        var cachedCurrentPage = Pages.FirstOrDefault(p => p.Title == Xbam.Inspector.Pages.Index.TabState[TabId].CurrentItemId);
        if (cachedCurrentPage is not null && cachedCurrentPage != ActivePage) {
            ActivatePage(cachedCurrentPage);
            StateHasChanged();
        }
    }
}