@using Xbam.Inspector.Data
@using Xbam.Inspector.Pages.InspectorIndex.Tabs.Pannels
@using Xbam.Inspector.Shared.Components
@using Xbam.Inspector.Shared.Components.Tabs
@inherits TabsArea
@implements IHandleAfterRender

<CascadingValue Value="this">
    <div style="width:100%;height:100%;background-color:#333333;" class="d-flex flex-row justify-content-start">
        <div style="max-width:300px;background-color:dimgrey;" class="btn-group-vertical d-flex justify-content-start" role="toolbar">
          @foreach (TabPannel tabPage in Pages) {
            <button
                style="width:100%"
                type="button"
                class="@GetButtonClass(tabPage)"
                @onclick=@(() => {
                    ActivatePage(tabPage);
                    Xbam.Inspector.Pages.Index.TabState[TabId].CurrentItemId = tabPage.Title;
                })>
                @tabPage.Title
            </button>
          }
        </div>
        <div style="height:100%;color:white;">
            @ChildContent
            @foreach(ItemData itemData in Xbam.Inspector.Pages.Index.TabState[TabId].ItemsState.Values) {
                <ItemPannel TabId=@TabId Key=@itemData.Key/>
            }
        </div>
    </div>
</CascadingValue>

@code {
    [Parameter, EditorRequired]
    public string TabId {
        get;
        set;
    }

    async Task IHandleAfterRender.OnAfterRenderAsync() {
        var cachedCurrentPage = Pages.FirstOrDefault(p => p.Title == Xbam.Inspector.Pages.Index.TabState[TabId].CurrentItemId);
        if (cachedCurrentPage is not null && cachedCurrentPage != ActivePage) {
            ActivatePage(cachedCurrentPage);
            StateHasChanged();
        }
    }
}